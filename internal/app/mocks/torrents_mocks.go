// Code generated by MockGen. DO NOT EDIT.
// Source: internal/pkg/torrent/client.go

// Package mocks is a generated GoMock package.
package mocks

import (
	torrent "github.com/anacrolix/torrent"
	metainfo "github.com/anacrolix/torrent/metainfo"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockTorrent is a mock of Torrent interface
type MockTorrent struct {
	ctrl     *gomock.Controller
	recorder *MockTorrentMockRecorder
}

// MockTorrentMockRecorder is the mock recorder for MockTorrent
type MockTorrentMockRecorder struct {
	mock *MockTorrent
}

// NewMockTorrent creates a new mock instance
func NewMockTorrent(ctrl *gomock.Controller) *MockTorrent {
	mock := &MockTorrent{ctrl: ctrl}
	mock.recorder = &MockTorrentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTorrent) EXPECT() *MockTorrentMockRecorder {
	return m.recorder
}

// BytesCompleted mocks base method
func (m *MockTorrent) BytesCompleted() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BytesCompleted")
	ret0, _ := ret[0].(int64)
	return ret0
}

// BytesCompleted indicates an expected call of BytesCompleted
func (mr *MockTorrentMockRecorder) BytesCompleted() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BytesCompleted", reflect.TypeOf((*MockTorrent)(nil).BytesCompleted))
}

// GotInfo mocks base method
func (m *MockTorrent) GotInfo() <-chan struct{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GotInfo")
	ret0, _ := ret[0].(<-chan struct{})
	return ret0
}

// GotInfo indicates an expected call of GotInfo
func (mr *MockTorrentMockRecorder) GotInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GotInfo", reflect.TypeOf((*MockTorrent)(nil).GotInfo))
}

// Drop mocks base method
func (m *MockTorrent) Drop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Drop")
}

// Drop indicates an expected call of Drop
func (mr *MockTorrentMockRecorder) Drop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Drop", reflect.TypeOf((*MockTorrent)(nil).Drop))
}

// DownloadAll mocks base method
func (m *MockTorrent) DownloadAll() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DownloadAll")
}

// DownloadAll indicates an expected call of DownloadAll
func (mr *MockTorrentMockRecorder) DownloadAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadAll", reflect.TypeOf((*MockTorrent)(nil).DownloadAll))
}

// Length mocks base method
func (m *MockTorrent) Length() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Length")
	ret0, _ := ret[0].(int64)
	return ret0
}

// Length indicates an expected call of Length
func (mr *MockTorrentMockRecorder) Length() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Length", reflect.TypeOf((*MockTorrent)(nil).Length))
}

// Metainfo mocks base method
func (m *MockTorrent) Metainfo() metainfo.MetaInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Metainfo")
	ret0, _ := ret[0].(metainfo.MetaInfo)
	return ret0
}

// Metainfo indicates an expected call of Metainfo
func (mr *MockTorrentMockRecorder) Metainfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Metainfo", reflect.TypeOf((*MockTorrent)(nil).Metainfo))
}

// InfoHash mocks base method
func (m *MockTorrent) InfoHash() metainfo.Hash {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InfoHash")
	ret0, _ := ret[0].(metainfo.Hash)
	return ret0
}

// InfoHash indicates an expected call of InfoHash
func (mr *MockTorrentMockRecorder) InfoHash() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InfoHash", reflect.TypeOf((*MockTorrent)(nil).InfoHash))
}

// Files mocks base method
func (m *MockTorrent) Files() []*torrent.File {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Files")
	ret0, _ := ret[0].([]*torrent.File)
	return ret0
}

// Files indicates an expected call of Files
func (mr *MockTorrentMockRecorder) Files() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Files", reflect.TypeOf((*MockTorrent)(nil).Files))
}

// Name mocks base method
func (m *MockTorrent) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name
func (mr *MockTorrentMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockTorrent)(nil).Name))
}
