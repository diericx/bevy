// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/app.go

// Package mocks is a generated GoMock package.
package mocks

import (
	metainfo "github.com/anacrolix/torrent/metainfo"
	app "github.com/diericx/iceetime/internal/app"
	torrent "github.com/diericx/iceetime/internal/pkg/torrent"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockTorrentMetaRepo is a mock of TorrentMetaRepo interface
type MockTorrentMetaRepo struct {
	ctrl     *gomock.Controller
	recorder *MockTorrentMetaRepoMockRecorder
}

// MockTorrentMetaRepoMockRecorder is the mock recorder for MockTorrentMetaRepo
type MockTorrentMetaRepoMockRecorder struct {
	mock *MockTorrentMetaRepo
}

// NewMockTorrentMetaRepo creates a new mock instance
func NewMockTorrentMetaRepo(ctrl *gomock.Controller) *MockTorrentMetaRepo {
	mock := &MockTorrentMetaRepo{ctrl: ctrl}
	mock.recorder = &MockTorrentMetaRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTorrentMetaRepo) EXPECT() *MockTorrentMetaRepoMockRecorder {
	return m.recorder
}

// Store mocks base method
func (m *MockTorrentMetaRepo) Store(arg0 app.TorrentMeta) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Store indicates an expected call of Store
func (mr *MockTorrentMetaRepoMockRecorder) Store(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockTorrentMetaRepo)(nil).Store), arg0)
}

// GetByInfoHashStr mocks base method
func (m *MockTorrentMetaRepo) GetByInfoHashStr(arg0 string) (app.TorrentMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByInfoHashStr", arg0)
	ret0, _ := ret[0].(app.TorrentMeta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByInfoHashStr indicates an expected call of GetByInfoHashStr
func (mr *MockTorrentMetaRepoMockRecorder) GetByInfoHashStr(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByInfoHashStr", reflect.TypeOf((*MockTorrentMetaRepo)(nil).GetByInfoHashStr), arg0)
}

// RemoveByInfoHashStr mocks base method
func (m *MockTorrentMetaRepo) RemoveByInfoHashStr(hashStr string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveByInfoHashStr", hashStr)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveByInfoHashStr indicates an expected call of RemoveByInfoHashStr
func (mr *MockTorrentMetaRepoMockRecorder) RemoveByInfoHashStr(hashStr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveByInfoHashStr", reflect.TypeOf((*MockTorrentMetaRepo)(nil).RemoveByInfoHashStr), hashStr)
}

// MockReleaseRepo is a mock of ReleaseRepo interface
type MockReleaseRepo struct {
	ctrl     *gomock.Controller
	recorder *MockReleaseRepoMockRecorder
}

// MockReleaseRepoMockRecorder is the mock recorder for MockReleaseRepo
type MockReleaseRepoMockRecorder struct {
	mock *MockReleaseRepo
}

// NewMockReleaseRepo creates a new mock instance
func NewMockReleaseRepo(ctrl *gomock.Controller) *MockReleaseRepo {
	mock := &MockReleaseRepo{ctrl: ctrl}
	mock.recorder = &MockReleaseRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockReleaseRepo) EXPECT() *MockReleaseRepoMockRecorder {
	return m.recorder
}

// GetForMovie mocks base method
func (m *MockReleaseRepo) GetForMovie(imdbID, title, year string, minQuality int) ([]app.Release, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetForMovie", imdbID, title, year, minQuality)
	ret0, _ := ret[0].([]app.Release)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetForMovie indicates an expected call of GetForMovie
func (mr *MockReleaseRepoMockRecorder) GetForMovie(imdbID, title, year, minQuality interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetForMovie", reflect.TypeOf((*MockReleaseRepo)(nil).GetForMovie), imdbID, title, year, minQuality)
}

// MockMovieTorrentLinkRepo is a mock of MovieTorrentLinkRepo interface
type MockMovieTorrentLinkRepo struct {
	ctrl     *gomock.Controller
	recorder *MockMovieTorrentLinkRepoMockRecorder
}

// MockMovieTorrentLinkRepoMockRecorder is the mock recorder for MockMovieTorrentLinkRepo
type MockMovieTorrentLinkRepoMockRecorder struct {
	mock *MockMovieTorrentLinkRepo
}

// NewMockMovieTorrentLinkRepo creates a new mock instance
func NewMockMovieTorrentLinkRepo(ctrl *gomock.Controller) *MockMovieTorrentLinkRepo {
	mock := &MockMovieTorrentLinkRepo{ctrl: ctrl}
	mock.recorder = &MockMovieTorrentLinkRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMovieTorrentLinkRepo) EXPECT() *MockMovieTorrentLinkRepoMockRecorder {
	return m.recorder
}

// Store mocks base method
func (m *MockMovieTorrentLinkRepo) Store(arg0 app.MovieTorrentLink) (*app.MovieTorrentLink, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", arg0)
	ret0, _ := ret[0].(*app.MovieTorrentLink)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Store indicates an expected call of Store
func (mr *MockMovieTorrentLinkRepoMockRecorder) Store(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockMovieTorrentLinkRepo)(nil).Store), arg0)
}

// GetByImdbID mocks base method
func (m *MockMovieTorrentLinkRepo) GetByImdbID(imdbID string) ([]app.MovieTorrentLink, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByImdbID", imdbID)
	ret0, _ := ret[0].([]app.MovieTorrentLink)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByImdbID indicates an expected call of GetByImdbID
func (mr *MockMovieTorrentLinkRepoMockRecorder) GetByImdbID(imdbID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByImdbID", reflect.TypeOf((*MockMovieTorrentLinkRepo)(nil).GetByImdbID), imdbID)
}

// MockTorrentClient is a mock of TorrentClient interface
type MockTorrentClient struct {
	ctrl     *gomock.Controller
	recorder *MockTorrentClientMockRecorder
}

// MockTorrentClientMockRecorder is the mock recorder for MockTorrentClient
type MockTorrentClientMockRecorder struct {
	mock *MockTorrentClient
}

// NewMockTorrentClient creates a new mock instance
func NewMockTorrentClient(ctrl *gomock.Controller) *MockTorrentClient {
	mock := &MockTorrentClient{ctrl: ctrl}
	mock.recorder = &MockTorrentClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTorrentClient) EXPECT() *MockTorrentClientMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockTorrentClient) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close
func (mr *MockTorrentClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockTorrentClient)(nil).Close))
}

// AddMagnet mocks base method
func (m *MockTorrentClient) AddMagnet(arg0 string) (torrent.Torrent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMagnet", arg0)
	ret0, _ := ret[0].(torrent.Torrent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddMagnet indicates an expected call of AddMagnet
func (mr *MockTorrentClientMockRecorder) AddMagnet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMagnet", reflect.TypeOf((*MockTorrentClient)(nil).AddMagnet), arg0)
}

// AddFile mocks base method
func (m *MockTorrentClient) AddFile(arg0 string) (torrent.Torrent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFile", arg0)
	ret0, _ := ret[0].(torrent.Torrent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddFile indicates an expected call of AddFile
func (mr *MockTorrentClientMockRecorder) AddFile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFile", reflect.TypeOf((*MockTorrentClient)(nil).AddFile), arg0)
}

// Torrents mocks base method
func (m *MockTorrentClient) Torrents() []torrent.Torrent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Torrents")
	ret0, _ := ret[0].([]torrent.Torrent)
	return ret0
}

// Torrents indicates an expected call of Torrents
func (mr *MockTorrentClientMockRecorder) Torrents() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Torrents", reflect.TypeOf((*MockTorrentClient)(nil).Torrents))
}

// Torrent mocks base method
func (m *MockTorrentClient) Torrent(arg0 metainfo.Hash) (torrent.Torrent, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Torrent", arg0)
	ret0, _ := ret[0].(torrent.Torrent)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Torrent indicates an expected call of Torrent
func (mr *MockTorrentClientMockRecorder) Torrent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Torrent", reflect.TypeOf((*MockTorrentClient)(nil).Torrent), arg0)
}
